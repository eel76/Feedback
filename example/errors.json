{
  "CG1": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/random/|/vg[.]approval/",
    "matched_text": "(std|cxx11) *:: *(normal_distribution|poisson_distribution|uniform_int_distribution|uniform_real_distribution)",
    "ignored_text": "//.*(std|cxx11) *:: *(normal_distribution|poisson_distribution|uniform_int_distribution|uniform_real_distribution)",
    "marked_text": ".*",
    "summary": "Avoid random number distributions from std",
    "rationale": "We want consistent results across all platforms. Unfortunately algorithms for distributions are not mandated, so implementations can vary. See also: https://www.reddit.com/r/cpp/comments/30w7cs/inconsistency_in_c_random/",
    "workaround": "Please use a random number distribution from vg::random instead"
  },
  "CG2": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/random/|/vg[.]approval/",
    "matched_text": "(std|cxx11) *:: *linear_congruential_engine",
    "ignored_text": "//.*(std|cxx11) *:: *linear_congruential_engine",
    "marked_text": ".*",
    "summary": "Avoid std::linear_congruential_engine",
    "rationale": "We want consistent results across all platforms. However, clang does not conform to the mandated standard algorithm and its generator produces different values.",
    "workaround": "Please use vg::random::linear_congruential_engine instead."
  },
  "CG3": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "__VGL_MODULE_SYMBOL",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "__VGL_MODULE_SYMBOL is deprecated",
    "rationale": "C++ has builtin support to make identifiers local to a translation unit.",
    "workaround": "Please define all free variables/functions in an unnamed namespace instead."
  },
  "CG4": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "[^ -~\n\r\t]",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Source files are ASCII only",
    "rationale": "Some tools are not able to deal with non-ASCII files properly. In addition, we avert bugs in fromUtf8(\"\") invocations.",
    "workaround": "Please remove all non-ASCII characters, including a possible UTF-8 BOM."
  },
  "CG5": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/memory/rpmalloc[.][ch]|/unit-tests/rpmalloc/tests.c",
    "matched_text": "\t",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Don't use tabulators in source files",
    "rationale": "Developers who use spaces make more money than those who use tabs. See also: https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/",
    "workaround": "Please replace all tabulators with spaces and adjust your editor settings accordingly."
  },
  "CG6": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "vgs[.]operatorpluginapi",
    "matched_text": "@VG_COPYRIGHT_NOTICE@|^[^\"]+Copyright[^\"]+Volume +Graphics +GmbH.*$",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Internal source files don't need a copyright notice",
    "rationale": "See also http://confluence.volumegraphics.com:8090/x/EQAEAw for more information.",
    "workaround": "Please remove the copyright notice from the source file or add an exception to this coding guideline."
  },
  "CG7": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": ".*",
    "matched_text": "[/][*] *VG_NARROWING_CAST *[*][/] *static_cast",
    "ignored_text": "^$",
    "marked_text": "static_cast",
    "summary": "Please review this automatically generated code change",
    "rationale": "See also http://confluence.volumegraphics.com:8090/display/AR/Activate+narrowing+cast+warning+C4244 for details.",
    "workaround": "Please review this 'static_cast' carefully! Either remove it with a more appropriate fix (this should be your default approach) or remove this comment if you think that this cast is adequate."
  },
  "CG8": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *([<][^>]*|[\"][^\"]*)[\\\\]",
    "ignored_text": "^$",
    "marked_text": "[\\\\]",
    "summary": "Don't use backslashes in include directives",
    "rationale": "Non Windows systems may not recognize a backslash as path delimiter.",
    "workaround": "Please replace all backslashes with forward slashes in include directives."
  },
  "CG9": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *[<]vg/cxx11/[^>]*[>]",
    "ignored_text": "^$",
    "marked_text": "vg/cxx11/[^>]*",
    "summary": "Don't include C++ 11 emulation headers any longer",
    "rationale": "The C++ 11 emulation layer is deprecated. Nowadays we require a compiler with full C++ 11 support.",
    "workaround": "Please use classes and headers from std library instead."
  },
  "CG10": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *([<][^>]*|[\"][^\"]*)//",
    "ignored_text": "^$",
    "marked_text": "//",
    "summary": "Duplicate forward slash in include directive",
    "rationale": "Such typos are ignored by most compilers, but they complicate automated refactorings.",
    "workaround": "Please remove the redundant forward slash."
  },
  "CG22": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "fromUtf8 *[(] *\"([^\"\\\\]|\\\\\")*[^ -~\n\r\t]",
    "ignored_text": "^$",
    "marked_text": "[^ -~\n\r\t]",
    "summary": "String literal with bad UTF-8 encoding",
    "rationale": "This string literal is corrupt and will be misinterpreted during runtime.",
    "workaround": "Please replace all non-ASCII characters with their proper UTF-8 encoding: http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=string-literal"
  },
  "CG30": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include[<].*[>] *$",
    "ignored_text": "^$",
    "marked_text": "include",
    "summary": "The missing space between the preprocessor tokens",
    "rationale": "It's necessary to have a space between #include and the following <, as its absence leads to incorrect parentheses counting by lupdate (Qt)",
    "workaround": "Please insert a space between #include and the following <"
  },
  "CG31": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "vg\\.inline\\.controller|vg\\.inline\\.worker|vg\\.inline\\.approver|vg\\.inline\\.viewer|vgs\\.inlinecommons|vgq/messagebox|vgs\\.inlineimageviewer",
    "matched_text": "[^A-Za-z_](QMessageBox)",
    "ignored_text": "CG-31-Intended",
    "marked_text": "QMessageBox",
    "summary": "Use VGQMessageBox instead of QMessageBox",
    "rationale": "QMessageBox may popup during inline scenarios and block the application from running, which is a disaster for industrial automation",
    "workaround": "Replace QMessageBox with VGQMessageBox. (If you really know, what you do, use /*CG-31-Intended*/ to mark this usage as allowed / valid)"
  },
  "CG32": {
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": " *VG_EXPORT +(class|struct) *",
    "ignored_text": "^$",
    "marked_text": "VG_EXPORT",
    "summary": "Use the new VG_EXPORT implementation correctly. See http://confluence.volumegraphics.com:8090/display/DEV/2019/07/31/Using+VG_EXPORT+Correctly",
    "rationale": "It breaks clang builds including but not limited to apple-clang (Mac)",
    "workaround": "Put VG_EXPORT between the 'class' or 'struct' keyword and the type name. Eg. class VG_EXPORT MySuperClass"
  }
}
