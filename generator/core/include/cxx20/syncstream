#pragma once

#include <version>
#ifdef __cpp_lib_syncbuf
#include <syncstream>
#else
#include <mutex>
#include <sstream>
#include <unordered_map>
#endif

namespace cxx20 {

#ifdef __cpp_lib_syncbuf
  using osyncstream = std::osyncstream;
#else
  class osyncstream : public std::ostream {
  public:
    explicit osyncstream(std::ostream& output) : std::ostream(&buffer_), output_(output) {
    }
    ~osyncstream() {
      emit();
    }

    void emit() {
      static concurrent_unordered_map<std::ostream*, std::mutex> locks;

      std::stringbuf buffer;

      using std::swap;
      swap(buffer, buffer_);

      // FIXME: according to our tests, the following code should be sufficient (and more efficient)
      // however, the generator output files are not written reliably?!

      //auto const locked  = std::lock_guard{ locks[&output_] };
      //output_ << &buffer;

      auto const content = buffer.str();
      auto const locked  = std::lock_guard{ locks[&output_] };
      output_ << content;
    }

  private:
    template <class Key, class Value> class concurrent_unordered_map {
    public:
      template <class KeyLike> auto operator[](KeyLike&& key) -> Value& {
        auto const locked = std::lock_guard{ mutex_ };
        return map_[std::forward<KeyLike>(key)];
      }

    private:
      std::unordered_map<Key, Value> map_;
      std::mutex                     mutex_;
    };

    std::stringbuf buffer_;
    std::ostream&  output_;
  };
#endif
} // namespace cxx20
