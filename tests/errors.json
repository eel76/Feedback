{
  "CG1": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/random/|/vg[.]approval/",
    "matched_text": "(std|cxx11) *:: *(normal_distribution|poisson_distribution|uniform_int_distribution|uniform_real_distribution)",
    "ignored_text": "//.*(std|cxx11) *:: *(normal_distribution|poisson_distribution|uniform_int_distribution|uniform_real_distribution)",
    "marked_text": ".*",
    "summary": "Avoid random number distributions from std",
    "rationale": "We want consistent results across all platforms. Unfortunately algorithms for distributions are not mandated, so implementations can vary. See also: https://www.reddit.com/r/cpp/comments/30w7cs/inconsistency_in_c_random/",
    "workaround": "Please use a random number distribution from vg::random instead"
  },
  "CG2": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/random/|/vg[.]approval/",
    "matched_text": "(std|cxx11) *:: *linear_congruential_engine",
    "ignored_text": "//.*(std|cxx11) *:: *linear_congruential_engine",
    "marked_text": ".*",
    "summary": "Avoid std::linear_congruential_engine",
    "rationale": "We want consistent results across all platforms. However, clang does not conform to the mandated standard algorithm and its generator produces different values.",
    "workaround": "Please use vg::random::linear_congruential_engine instead."
  },
  "CG3": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "__VGL_MODULE_SYMBOL",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "__VGL_MODULE_SYMBOL is deprecated",
    "rationale": "C++ has builtin support to make identifiers local to a translation unit.",
    "workaround": "Please define all free variables/functions in an unnamed namespace instead."
  },
  "CG4": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "[^ -~\n\r\t]",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Source files are ASCII only",
    "rationale": "Some tools are not able to deal with non-ASCII files properly. In addition, we avert bugs in fromUtf8(\"\") invocations.",
    "workaround": "Please remove all non-ASCII characters, including a possible UTF-8 BOM."
  },
  "CG5": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "/vg/memory/rpmalloc[.][ch]|/unit-tests/rpmalloc/tests.c",
    "matched_text": "\t",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Don't use tabulators in source files",
    "rationale": "Developers who use spaces make more money than those who use tabs. See also: https://stackoverflow.blog/2017/06/15/developers-use-spaces-make-money-use-tabs/",
    "workaround": "Please replace all tabulators with spaces and adjust your editor settings accordingly."
  },
  "CG6": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "vgs[.]operatorpluginapi",
    "matched_text": "@VG_COPYRIGHT_NOTICE@|^[^\"]+Copyright[^\"]+Volume +Graphics +GmbH.*$",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Internal source files don't need a copyright notice",
    "rationale": "See also http://confluence.volumegraphics.com:8090/x/EQAEAw for more information.",
    "workaround": "Please remove the copyright notice from the source file or add an exception to this rule."
  },
  "CG7": {
    "severity": "info",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": ".*",
    "matched_text": "[/][*] *VG_NARROWING_CAST *[*][/] *static_cast",
    "ignored_text": "^$",
    "marked_text": "static_cast",
    "summary": "Please review this automatically generated code change",
    "rationale": "See also http://confluence.volumegraphics.com:8090/display/AR/Activate+narrowing+cast+warning+C4244 for details.",
    "workaround": "Please review this 'static_cast' carefully! Either remove it with a more appropriate fix (this should be your default approach) or remove this comment if you think that this cast is adequate."
  },
  "CG8": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *([<][^>]*|[\"][^\"]*)[\\\\]",
    "ignored_text": "^$",
    "marked_text": "[\\\\]",
    "summary": "Don't use backslashes in include directives",
    "rationale": "Non Windows systems may not recognize a backslash as path delimiter.",
    "workaround": "Please replace all backslashes with forward slashes in include directives."
  },
  "CG9": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *[<]vg/cxx11/[^>]*[>]",
    "ignored_text": "^$",
    "marked_text": "vg/cxx11/[^>]*",
    "summary": "Don't include C++ 11 emulation headers any longer",
    "rationale": "The C++ 11 emulation layer is deprecated. Nowadays we require a compiler with full C++ 11 support.",
    "workaround": "Please use classes and headers from std library instead."
  },
  "CG10": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include *([<][^>]*|[\"][^\"]*)//",
    "ignored_text": "^$",
    "marked_text": "//",
    "summary": "Duplicate forward slash in include directive",
    "rationale": "Such typos are ignored by most compilers, but they complicate automated refactorings.",
    "workaround": "Please remove the redundant forward slash."
  },
  "CG11": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "// *(TODO|FIXME|REVIEW|OPTIMIZE|HACK|XXX|BUG)",
    "ignored_text": "^$",
    "marked_text": "[A-Z]+",
    "summary": "Unfinished task (TODO/FIXME/HACK/...)",
    "rationale": "Task markers should be used only rarely and temporarily in our code base because they indicate a technical debt. They tend to rot over time and will be forgotton eventually.",
    "workaround": "Please finish this task if possible. Remove its marker from our code base either way. Use an issue tracker like JIRA for important tasks."
  },
  "CG12": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "bind(1st|2nd)? *[(].*_\\d+.*[)]",
    "ignored_text": "^$",
    "marked_text": "bind(1st|2nd)?",
    "summary": "Bind expressions are deprecated",
    "rationale": "bind() prevents the optimizer from doing as good a job. It also prevents good diagnostics and silents errors.",
    "workaround": "Please use a (generic) lambda expression instead."
  },
  "CG13": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "\\[\\[ *deprecated *\\]\\]",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Deprecation attribute without workaround message",
    "rationale": "Solely marking an entity as deprecated does not give other developers a hint how to fix its usage.",
    "workaround": "Please add a workaround message or remove the attribute completely."
  },
  "CG14": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "vg/platform[.]h$",
    "matched_text": "VG_DEPRECATED_(LEVEL_(0_|1_|2_))?MSG *[(] *[\"][^\"]*[\"] *[)]",
    "ignored_text": "^$",
    "marked_text": "VG_DEPRECATED_(LEVEL_(0_|1_|2_))?MSG",
    "summary": "Legacy deprecation framework usage",
    "rationale": "This framework just administers technical debt, but it doesn't create incentives for removing it.",
    "workaround": "Please use a [[deprecated(\"msg\")]] attribute if you intend to fix all use cases soon, or remove the deprecation marker completely."
  },
  "CG15": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "vgl(Error|Warning) *[(] *(VGL|(:: *)vg *:: *)?String *:: *fromUtf8 *[(] *\"",
    "ignored_text": "^$",
    "marked_text": "fromUtf8",
    "summary": "Untranslated diagnostic message",
    "rationale": "All diagnostic messages will possibly be shown to an user so they have to be translated.",
    "workaround": "Please mark this string for translation in a meaningful context."
  },
  "CG16": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "vgl(Error|Warning) *[(] *(VGL|(:: *)vg *:: *)?String *:: *fromUtf8 *[(] *\"\\^",
    "ignored_text": "^$",
    "marked_text": "\\^",
    "summary": "Diagnostic message with debug message format \"^...\"",
    "rationale": "You probably confused our diagnostics framework with our debugging framework.",
    "workaround": "Please remove the caret ^ at the start of the message."
  },
  "CG17": {
    "severity": "warning",
    "matched_files": "(^|/)CMakeLists[.]txt$|[.]cmake$",
    "ignored_files": "^$",
    "matched_text": "^ *file *[(] *GLOB(_RECURSE)? +",
    "ignored_text": "^$",
    "marked_text": "GLOB(_RECURSE)?",
    "summary": "CMake globbing expressions are deprecated",
    "rationale": "Globbing expressions break incremental builds. See also https://stackoverflow.com/a/32412044/2266052 or https://www.slideshare.net/DanielPfeifer1/cmake-48475415 for more information.",
    "workaround": "Please maintain an explicit file list instead. You may leave your code as is and add an exception if and only if your CMake code is run in script mode rather than configuration mode."
  },
  "CG18": {
    "severity": "info",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": ".*",
    "matched_text": " +$",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "Extra whitespace at end of line",
    "rationale": "Extra whitespace impairs the user experience of most text editors. In addition it takes more storage space than necessary, it increases processing time and it may even cause bugs.",
    "workaround": "Please remove any extra whitespace."
  },
  "CG20": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include +[<]vgl/(alignedarray|localarray.*|lockedarray.*|valuearray|valuearrayopcache|valuelist)[.]h[>]",
    "ignored_text": "^$",
    "marked_text": "[^<]+[.]h",
    "summary": "Source files should not include template header files (.h)",
    "rationale": "Source files must include the corresponding template implementation file (.i) anyway. Including the header file only breaks a GCC/CLANG build even though MSVC often builds cleanly.",
    "workaround": "Please include the corresponding template implementation file (.i) instead."
  },
  "CG21": {
    "severity": "warning",
    "matched_files": "[.](h)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include +[<]vgl/(alignedarray|localarray.*|lockedarray.*|valuearray|valuearrayopcache|valuelist)[.]i[>]",
    "ignored_text": "^$",
    "marked_text": "[^<]+[.]i",
    "summary": "Header files should not include template implementation files (.i)",
    "rationale": "Keeping header file dependencies to a minimum in C++ is always a good idea, see also: https://www.amazon.de/Large-Scale-Software-Addison-Wesley-Professional-Computing/dp/0201633620",
    "workaround": "Please include the corresponding template header file (.h) instead."
  },
  "CG22": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "fromUtf8 *[(] *\"([^\"\\\\]|\\\\\")*[^ -~\n\r\t]",
    "ignored_text": "^$",
    "marked_text": "[^ -~\n\r\t]",
    "summary": "String literal with bad UTF-8 encoding",
    "rationale": "This string literal is corrupt and will be misinterpreted during runtime.",
    "workaround": "Please replace all non-ASCII characters with their proper UTF-8 encoding: http://www.utf8-chartable.de/unicode-utf8-table.pl?utf8=string-literal"
  },
  "CG23": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *if.* [_a-z][_a-z0-9]*_PRODUCT_[_a-z0-9]*",
    "ignored_text": "^$",
    "marked_text": "[_a-z][_a-z0-9]*_PRODUCT_[_a-z0-9]*",
    "summary": "Avoid conditional compilation with product #defines (macros)",
    "rationale": "Conditional compilation in general and product #defines (macros) in particular break component modularity. They enforce component rebuilding for every product configuration. This design does not scale as needed.",
    "workaround": "Please use a modular component design, feature toggles and our product information API instead."
  },
  "CG24": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include +[<].+[.].+/(begin|end)[>]",
    "ignored_text": "^$",
    "marked_text": "[^<]+/(begin|end)",
    "summary": "Wrong use of module framework",
    "rationale": "This header file is meant for the public API of a component only. A source file doesn't add anything to the public API by definition (this might be no longer true with native C++ module support).",
    "workaround": "Please remove this include directive. Include <vg/begin> at the beginning and <vg/end> at the end of a source file."
  },
  "CG25": {
    "severity": "info",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": ".*",
    "matched_text": "typedef +[^;{}]+[;]",
    "ignored_text": "^$",
    "marked_text": "typedef",
    "summary": "Old style type alias",
    "rationale": "C++ 11 introduced 'using' declarations which provide a superior way to define a type alias (http://en.cppreference.com/w/cpp/language/type_alias). We should use the modern syntax throughout the code base for consistency/readability reasons.",
    "workaround": "Please define this type alias with a 'using' declaration instead."
  },
  "CG26": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "[tT]ask *([.]|->) *error *[(] *VGL *:: *[_a-zA-Z0-9]+ *[)]",
    "ignored_text": "^$",
    "marked_text": ".*",
    "summary": "No error diagnostics usage",
    "rationale": "See the corresponding section of the confluence article http://confluence.volumegraphics.com:8090/display/DEV/Task+API+usage#TaskAPIusage-Diagnostics.",
    "workaround": "Please set the error diagnostic corresponding to the error code, e.g. vglGenericError () instead of VGL::GenericError."
  },
  "CG27": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": " *# *if.*_PRODUCT_.*",
    "ignored_text": "^$",
    "marked_text": "[_a-zA-Z0-9]+_PRODUCT_[_a-zA-Z0-9]+",
    "summary": "Product macro (#define) in conditional preprocessing block",
    "rationale": "You are violating several design principals which make this code hard to maintain. However, what really bothers us is that the enclosing component no longer can be re-used for different products without recompilation. With many components and many products this means a lot of unnecessary recompilations - a luxury we cannot afford.",
    "workaround": "Use a component (library) design where product specific features are bundled in true modules, i.e. a module can be added/removed easily. A good designed module can be added/removed in your project description (a CMake lists file for instance). You may take a look at http://bitbucket.volumegraphics.com:7990/projects/SBP/repos/dependency-inversion/browse if you need inspiration. As an - inferior! - workaround you can use our runtime product info API to get the context of your code. Please note however, that you should avoid this approach in general due to security issues (product critical code should only be present in the wanted product). Additionally, we should strive for lean products: you don't have to pay (disk-space, compile-time, link-time, run-time, ...) for what you don't get."
  },
  "CG28": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "VGL_CLASS_API",
    "ignored_text": "^$",
    "marked_text": "VGL_CLASS_API",
    "summary": "Certain class API macros are deprecated",
    "rationale": "The macro VGL_CLASS_API has been superseded by a superior alternative.",
    "workaround": "Please use VGL_CLASS(class, superclass) instead."
  },
  "CG29": {
    "severity": "warning",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": " *virtual .*override",
    "ignored_text": "^$",
    "marked_text": "virtual",
    "summary": "redundant 'virtual' when also specifying 'override'",
    "rationale": "This is the recommended behavior of clang-tidy's modernize-use-override check",
    "workaround": "remove 'virtual' when specifying 'override'"
  },
  "CG30": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": "^ *# *include[<].*[>] *$",
    "ignored_text": "^$",
    "marked_text": "include",
    "summary": "The missing space between the preprocessor tokens",
    "rationale": "It's necessary to have a space between #include and the following <, as its absence leads to incorrect parentheses counting by lupdate (Qt)",
    "workaround": "Please insert a space between #include and the following <"
  },
  "CG31": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "vg\\.inline\\.controller|vg\\.inline\\.worker|vg\\.inline\\.approver|vg\\.inline\\.viewer|vgs\\.inlinecommons|vgq/messagebox|vgs\\.inlineimageviewer",
    "matched_text": "[^A-Za-z_](QMessageBox)",
    "ignored_text": "CG-31-Intended",
    "marked_text": "QMessageBox",
    "summary": "Use VGQMessageBox instead of QMessageBox",
    "rationale": "QMessageBox may popup during inline scenarios and block the application from running, which is a disaster for industrial automation",
    "workaround": "Replace QMessageBox with VGQMessageBox. (If you really know, what you do, use /*CG-31-Intended*/ to mark this usage as allowed / valid)"
  },
  "CG32": {
    "severity": "error",
    "matched_files": "[.](c|cc|cpp|cxx|h|i)([.]in)?$",
    "ignored_files": "^$",
    "matched_text": " *VG_EXPORT +(class|struct) *",
    "ignored_text": "^$",
    "marked_text": "VG_EXPORT",
    "summary": "Use the new VG_EXPORT implementation correctly. See http://confluence.volumegraphics.com:8090/display/DEV/2019/07/31/Using+VG_EXPORT+Correctly",
    "rationale": "It breaks clang builds including but not limited to apple-clang (Mac)",
    "workaround": "Put VG_EXPORT between the 'class' or 'struct' keyword and the type name. Eg. class VG_EXPORT MySuperClass"
  }
}
